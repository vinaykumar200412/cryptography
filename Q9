#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to generate the Playfair key matrix
void generateKeyMatrix(char key[], char matrix[SIZE][SIZE]) {
    int flag[26] = {0}; // To mark letters already in matrix
    int i, j, k;
    char c;

    // Fill in the matrix with the keyword
    for (i = 0, k = 0; key[k] != '\0'; k++) {
        c = toupper(key[k]);
        if (c == 'J') c = 'I'; // Treat 'I' and 'J' as the same
        if (!flag[c - 'A']) {
            matrix[i / SIZE][i % SIZE] = c;
            flag[c - 'A'] = 1;
            i++;
        }
    }

    // Fill in the rest of the matrix with remaining letters
    for (c = 'A'; i < SIZE * SIZE; c++) {
        if (c == 'J') continue; // Skip 'J'
        if (!flag[c - 'A']) {
            matrix[i / SIZE][i % SIZE] = c;
            flag[c - 'A'] = 1;
            i++;
        }
    }
}

// Function to find the position of characters in the matrix
void findPosition(char matrix[SIZE][SIZE], char a, char b, int *row1, int *col1, int *row2, int *col2) {
    if (a == 'J') a = 'I';
    if (b == 'J') b = 'I';
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == a) {
                *row1 = i;
                *col1 = j;
            }
            if (matrix[i][j] == b) {
                *row2 = i;
                *col2 = j;
            }
        }
    }
}

// Function to decrypt Playfair cipher text
void decryptPlayfair(char matrix[SIZE][SIZE], char ciphertext[], char plaintext[]) {
    int len = strlen(ciphertext);
    int row1, col1, row2, col2;

    for (int i = 0; i < len; i += 2) {
        findPosition(matrix, toupper(ciphertext[i]), toupper(ciphertext[i + 1]), &row1, &col1, &row2, &col2);
        if (row1 == row2) {
            // Same row
            plaintext[i] = matrix[row1][(col1 - 1 + SIZE) % SIZE];
            plaintext[i + 1] = matrix[row2][(col2 - 1 + SIZE) % SIZE];
        } else if (col1 == col2) {
            // Same column
            plaintext[i] = matrix[(row1 - 1 + SIZE) % SIZE][col1];
            plaintext[i + 1] = matrix[(row2 - 1 + SIZE) % SIZE][col2];
        } else {
            // Rectangle
            plaintext[i] = matrix[row1][col2];
            plaintext[i + 1] = matrix[row2][col1];
        }
    }
    plaintext[len] = '\0';
}

int main() {
    char key[] = "JFKENNEDY"; // Example keyword
    char matrix[SIZE][SIZE];
    char ciphertext[] = "KXJEY UREBE ZWEHE WRYTU HEYFS KREHE GOYFI WTTTU OLKSY CAJPO BOTEI ZONTX BYBNT GONEY CUZWR GDSON SXBOU YWRHE BAAHY USEDQ";
    char plaintext[sizeof(ciphertext)];

    // Remove non-alphabetic characters from ciphertext
    int len = strlen(ciphertext);
    for (int i = 0, j = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            ciphertext[j++] = ciphertext[i];
        }
    }
    ciphertext[strlen(ciphertext)] = '\0';

    generateKeyMatrix(key, matrix);

    printf("Playfair Key Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%c ", matrix[i][j]);
        }
        printf("\n");
    }

    decryptPlayfair(matrix, ciphertext, plaintext);

    printf("Decrypted text: %s\n", plaintext);

    return 0;
}
