#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};

// Function to find the position of characters in the matrix
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I'; // Treat 'I' and 'J' as the same
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to prepare the plaintext for encryption
void preparePlaintext(char plaintext[], char prepared[]) {
    int len = strlen(plaintext);
    int k = 0;

    for (int i = 0; i < len; i++) {
        if (isalpha(plaintext[i])) {
            plaintext[i] = toupper(plaintext[i]);
        } else {
            continue;
        }

        if (k > 0 && plaintext[i] == prepared[k - 1]) {
            prepared[k++] = 'X';
        }

        prepared[k++] = plaintext[i];
    }

    if (k % 2 != 0) {
        prepared[k++] = 'X'; // Padding
    }

    prepared[k] = '\0';
}

// Function to encrypt using Playfair cipher
void encryptPlayfair(char matrix[SIZE][SIZE], char plaintext[], char ciphertext[]) {
    int len = strlen(plaintext);
    int row1, col1, row2, col2;

    for (int i = 0; i < len; i += 2) {
        findPosition(matrix, plaintext[i], &row1, &col1);
        findPosition(matrix, plaintext[i + 1], &row2, &col2);

        if (row1 == row2) {
            // Same row
            ciphertext[i] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[i + 1] = matrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            // Same column
            ciphertext[i] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[i + 1] = matrix[(row2 + 1) % SIZE][col2];
        } else {
            // Rectangle
            ciphertext[i] = matrix[row1][col2];
            ciphertext[i + 1] = matrix[row2][col1];
        }
    }
    ciphertext[len] = '\0';
}

int main() {
    char plaintext[] = "Must see you over Cadogan West. Coming at once";
    char prepared[100];
    char ciphertext[100];

    preparePlaintext(plaintext, prepared);
    encryptPlayfair(matrix, prepared, ciphertext);

    printf("Prepared plaintext: %s\n", prepared);
    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
