#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26
#define MAX_PLAINTEXTS 100

// Standard letter frequencies for the English language
const float englishFreq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
    2.758, 0.978, 2.361, 0.150, 1.974, 0.074
};

// Function to calculate letter frequencies in the ciphertext
void calculateFrequencies(const char *text, float freq[]) {
    int count[ALPHABET_SIZE] = {0};
    int length = 0;

    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            count[toupper(text[i]) - 'A']++;
            length++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        freq[i] = ((float)count[i] / length) * 100;
    }
}

// Function to map letters based on frequency analysis
void generateMapping(const float ciphertextFreq[], char mapping[]) {
    int used[ALPHABET_SIZE] = {0};
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        int bestMatch = -1;
        float minDifference = 100.0;

        for (int j = 0; j < ALPHABET_SIZE; j++) {
            if (!used[j]) {
                float difference = abs(ciphertextFreq[i] - englishFreq[j]);
                if (difference < minDifference) {
                    minDifference = difference;
                    bestMatch = j;
                }
            }
        }

        mapping[i] = 'A' + bestMatch;
        used[bestMatch] = 1;
    }
}

// Function to decrypt the ciphertext using the mapping
void decrypt(const char *ciphertext, const char mapping[], char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = islower(ciphertext[i]) ? 'a' : 'A';
            int index = toupper(ciphertext[i]) - 'A';
            plaintext[i] = mapping[index] + (islower(ciphertext[i]) ? 'a' - 'A' : 0);
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Structure to store possible plaintexts and their scores
typedef struct {
    float score;
    char plaintext[256];
} DecryptionResult;

// Comparator function for sorting results by score
int compareResults(const void *a, const void *b) {
    DecryptionResult *resultA = (DecryptionResult *)a;
    DecryptionResult *resultB = (DecryptionResult *)b;
    return (resultA->score > resultB->score) - (resultA->score < resultB->score);
}

// Function to score a plaintext based on frequency match with English
float scorePlaintext(const float textFreq[]) {
    float score = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        score += abs(textFreq[i] - englishFreq[i]);
    }
    return score;
}

// Function to perform the letter frequency attack
void letterFrequencyAttack(const char *ciphertext, int topN) {
    DecryptionResult results[MAX_PLAINTEXTS];
    float ciphertextFreq[ALPHABET_SIZE];
    char mapping[ALPHABET_SIZE];

    calculateFrequencies(ciphertext, ciphertextFreq);
    generateMapping(ciphertextFreq, mapping);

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        // Generate mapping with different offsets
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            mapping[j] = (mapping[j] - 'A' + i) % ALPHABET_SIZE + 'A';
        }

        decrypt(ciphertext, mapping, results[i].plaintext);

        float textFreq[ALPHABET_SIZE];
        calculateFrequencies(results[i].plaintext, textFreq);
        results[i].score = scorePlaintext(textFreq);
    }

    // Sort the results by score in ascending order
    qsort(results, ALPHABET_SIZE, sizeof(DecryptionResult), compareResults);

    // Display the top N results
    printf("Top %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN && i < ALPHABET_SIZE; i++) {
        printf("Score: %6.2f, Plaintext: %s\n", results[i].score, results[i].plaintext);
    }
}

int main() {
    char ciphertext[256];
    int topN;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; // Remove newline character

    printf("Enter the number of top possible plaintexts to display: ");
    scanf("%d", &topN);

    letterFrequencyAttack(ciphertext, topN);

    return 0;
}
